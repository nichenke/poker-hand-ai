---
- name: Setup GTO+ Solver on Windows VM
  hosts: gto-solver
  gather_facts: yes
  tasks:
    - name: Install Chocolatey
      win_chocolatey:
        name: chocolatey
        state: present

    - name: Install Python via Chocolatey
      win_chocolatey:
        name: python
        version: "{{ python_version }}"
        state: present

    - name: Install Git via Chocolatey
      win_chocolatey:
        name: git
        state: present

    - name: Create GTO service directory
      win_file:
        path: C:\gto-service
        state: directory

    - name: Create temp directory
      win_file:
        path: C:\temp\gto
        state: directory

    - name: Download GTO service script
      win_copy:
        content: |
          from flask import Flask, request, jsonify
          import subprocess
          import json
          import os
          import time
          import logging
          from datetime import datetime

          # Configure logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(levelname)s - %(message)s',
              handlers=[
                  logging.FileHandler('gto_service.log'),
                  logging.StreamHandler()
              ]
          )

          app = Flask(__name__)

          @app.route('/health')
          def health_check():
              return jsonify({
                  "status": "healthy", 
                  "timestamp": time.time(),
                  "server": "Windows VM GTO+ Service"
              })

          @app.route('/api/analyze', methods=['POST'])
          def analyze_hand():
              try:
                  data = request.json
                  hand_id = data.get('hand_id', 'unknown')
                  hand_history = data.get('hand_history', '')
                  
                  logging.info(f"Received analysis request for hand {hand_id}")
                  
                  # Save hand to temp file
                  temp_dir = "C:\\temp\\gto"
                  os.makedirs(temp_dir, exist_ok=True)
                  temp_file = os.path.join(temp_dir, f"hand_{hand_id}.txt")
                  
                  with open(temp_file, 'w') as f:
                      f.write(hand_history)
                  
                  # Mock GTO+ analysis (replace with actual GTO+ command)
                  start_time = time.time()
                  
                  # Simulate processing time
                  time.sleep(2)
                  
                  # Mock solver output (replace with actual GTO+ results)
                  mock_output = {
                      "solver_output": f"Mock GTO+ analysis for hand {hand_id}\\n\\nPreflop Analysis:\\n- Position: Analysis based on hand history\\n- Range recommendations: Dynamically generated\\n- Frequency suggestions: Based on GTO principles",
                      "ranges": {
                          "CO": "77+, AJs+, AQo+, KQs",
                          "BB": "99+, AKo, AQs+, some KQs",
                          "BTN": "22+, A2+, K2+, Q2+, J2+"
                      },
                      "frequencies": {
                          "KK_5bet": 1.0,
                          "QQ_5bet": 0.52,
                          "QQ_call": 0.48,
                          "AKs_5bet": 0.41,
                          "AKs_call": 0.59
                      },
                      "ev_analysis": {
                          "KK_flat_loss": -0.18,
                          "QQ_fold_loss": -0.22,
                          "AKs_5bet_fold_loss": -0.03
                      }
                  }
                  
                  processing_time = time.time() - start_time
                  
                  # Cleanup
                  try:
                      os.remove(temp_file)
                  except:
                      pass
                  
                  logging.info(f"Completed analysis for hand {hand_id} in {processing_time:.2f}s")
                  
                  return jsonify({
                      **mock_output,
                      "processing_time": processing_time,
                      "status": "success",
                      "hand_id": hand_id
                  })
                  
              except Exception as e:
                  logging.error(f"Error processing hand: {str(e)}")
                  return jsonify({"error": str(e), "status": "error"}), 500

          if __name__ == '__main__':
              logging.info("Starting GTO+ Service on port {{ gto_service_port }}")
              app.run(host='0.0.0.0', port={{ gto_service_port }}, debug=False)
        dest: C:\gto-service\gto_service.py

    - name: Create requirements.txt
      win_copy:
        content: |
          flask==2.3.3
          requests==2.31.0
        dest: C:\gto-service\requirements.txt

    - name: Install Python packages
      win_command: pip install -r C:\gto-service\requirements.txt

    - name: Create Windows service installation script
      win_copy:
        content: |
          # Install and start GTO service
          $serviceName = "GTOService"
          $servicePath = "C:\gto-service\gto_service.py"
          $pythonPath = (Get-Command python).Source

          Write-Host "Setting up GTO+ Service..."

          # Stop and remove existing service if it exists
          if (Get-Service $serviceName -ErrorAction SilentlyContinue) {
              Write-Host "Stopping existing service..."
              Stop-Service $serviceName -Force
              sc.exe delete $serviceName
              Start-Sleep -Seconds 3
          }

          # Create new service using NSSM (Non-Sucking Service Manager)
          $nssmUrl = "https://nssm.cc/release/nssm-2.24.zip"
          $nssmZip = "C:\temp\nssm.zip"
          $nssmDir = "C:\nssm"

          if (-not (Test-Path $nssmDir)) {
              Write-Host "Downloading NSSM..."
              New-Item -ItemType Directory -Force -Path C:\temp
              Invoke-WebRequest -Uri $nssmUrl -OutFile $nssmZip
              Expand-Archive -Path $nssmZip -DestinationPath C:\temp -Force
              Move-Item -Path "C:\temp\nssm-2.24" -Destination $nssmDir -Force
              Remove-Item $nssmZip -Force
          }

          # Install service
          Write-Host "Installing Windows service..."
          & "$nssmDir\win64\nssm.exe" install $serviceName $pythonPath $servicePath
          & "$nssmDir\win64\nssm.exe" set $serviceName Start SERVICE_AUTO_START
          & "$nssmDir\win64\nssm.exe" set $serviceName AppDirectory "C:\gto-service"
          & "$nssmDir\win64\nssm.exe" set $serviceName DisplayName "GTO+ Solver Service"
          & "$nssmDir\win64\nssm.exe" set $serviceName Description "HTTP API service for GTO+ poker solver analysis"

          # Start service
          Write-Host "Starting GTO Service..."
          Start-Service $serviceName

          # Verify service status
          $service = Get-Service $serviceName
          Write-Host "Service Status: $($service.Status)"

          if ($service.Status -eq "Running") {
              Write-Host "GTO Service installed and started successfully!"
              Write-Host "Service URL: http://localhost:{{ gto_service_port }}"
              Write-Host "Health check: http://localhost:{{ gto_service_port }}/health"
          } else {
              Write-Host "Warning: Service may not have started properly"
          }
        dest: C:\gto-service\install_service.ps1

    - name: Configure Windows Firewall
      win_firewall_rule:
        name: "GTO Service"
        localport: "{{ gto_service_port }}"
        action: allow
        direction: in
        protocol: tcp
        state: present

    - name: Run service installation script
      win_shell: PowerShell.exe -ExecutionPolicy Bypass -File C:\gto-service\install_service.ps1
      register: service_install_result

    - name: Display service installation output
      debug:
        var: service_install_result.stdout_lines

    - name: Wait for service to start
      pause:
        seconds: 10

    - name: Verify service is running
      win_service:
        name: GTOService
        state: started
      register: service_result

    - name: Test health endpoint
      uri:
        url: "http://{{ ansible_host }}:{{ gto_service_port }}/health"
        method: GET
        timeout: 10
      register: health_check
      ignore_errors: yes

    - name: Display setup completion message
      debug:
        msg: |
          ========================================
          GTO+ Solver Setup Completed!
          ========================================

          Service Status: {{ service_result.state }}
          Access URL: http://{{ ansible_host }}:{{ gto_service_port }}
          Health Check: {{ health_check.status | default('Failed to connect') }}

          Next steps:
          1. Update your .env file with:
             GTO_SOLVER_URL=http://{{ ansible_host }}:{{ gto_service_port }}

          2. Test from Mac:
             curl http://{{ ansible_host }}:{{ gto_service_port }}/health

          3. Run GTO Assistant:
             make run

          4. View service logs on Windows VM:
             Get-Content C:\gto-service\gto_service.log -Tail 20
          ========================================
