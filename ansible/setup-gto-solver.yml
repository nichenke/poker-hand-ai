---
- name: Setup GTO+ Solver on Windows VM
  hosts: gto-solver
  gather_facts: yes
  tasks:
    - name: Install Chocolatey
      win_chocolatey:
        name: chocolatey
        state: present

    - name: Install Python via Chocolatey
      win_chocolatey:
        name: python
        version: "{{ python_version }}"
        state: present

    - name: Install Git via Chocolatey
      win_chocolatey:
        name: git
        state: present

    - name: Create GTO service directory
      win_file:
        path: C:\gto-service
        state: directory

    - name: Create temp directory
      win_file:
        path: C:\temp\gto
        state: directory

    - name: Copy Flask service script
      win_copy:
        src: "gto_service.py"
        dest: "C:\\gto-service\\gto_service.py"

    - name: Update Flask service script with port configuration
      win_lineinfile:
        path: "C:\\gto-service\\gto_service.py"
        regexp: 'service_port = \d+'
        line: "    service_port = {{ gto_service_port }}  # Configured by Ansible"

    - name: Create requirements.txt
      win_copy:
        content: |
          flask==2.3.3
          requests==2.31.0
        dest: C:\gto-service\requirements.txt

    - name: Install Python packages
      win_command: pip install -r C:\gto-service\requirements.txt

    - name: Create Windows service installation script
      win_copy:
        content: |
          # Install and start GTO service
          $serviceName = "GTOService"
          $servicePath = "C:\gto-service\gto_service.py"
          $pythonPath = (Get-Command python).Source

          Write-Host "Setting up GTO+ Service..."

          # Stop and remove existing service if it exists
          if (Get-Service $serviceName -ErrorAction SilentlyContinue) {
              Write-Host "Stopping existing service..."
              Stop-Service $serviceName -Force
              sc.exe delete $serviceName
              Start-Sleep -Seconds 3
          }

          # Create new service using NSSM (Non-Sucking Service Manager)
          $nssmUrl = "https://nssm.cc/release/nssm-2.24.zip"
          $nssmZip = "C:\temp\nssm.zip"
          $nssmDir = "C:\nssm"

          if (-not (Test-Path $nssmDir)) {
              Write-Host "Downloading NSSM..."
              New-Item -ItemType Directory -Force -Path C:\temp
              Invoke-WebRequest -Uri $nssmUrl -OutFile $nssmZip
              Expand-Archive -Path $nssmZip -DestinationPath C:\temp -Force
              Move-Item -Path "C:\temp\nssm-2.24" -Destination $nssmDir -Force
              Remove-Item $nssmZip -Force
          }

          # Install service
          Write-Host "Installing Windows service..."
          & "$nssmDir\win64\nssm.exe" install $serviceName $pythonPath $servicePath
          & "$nssmDir\win64\nssm.exe" set $serviceName Start SERVICE_AUTO_START
          & "$nssmDir\win64\nssm.exe" set $serviceName AppDirectory "C:\gto-service"
          & "$nssmDir\win64\nssm.exe" set $serviceName DisplayName "GTO+ Solver Service"
          & "$nssmDir\win64\nssm.exe" set $serviceName Description "HTTP API service for GTO+ poker solver analysis"

          # Start service
          Write-Host "Starting GTO Service..."
          Start-Service $serviceName

          # Verify service status
          $service = Get-Service $serviceName
          Write-Host "Service Status: $($service.Status)"

          if ($service.Status -eq "Running") {
              Write-Host "GTO Service installed and started successfully!"
              Write-Host "Service URL: http://localhost:{{ gto_service_port }}"
              Write-Host "Health check: http://localhost:{{ gto_service_port }}/health"
          } else {
              Write-Host "Warning: Service may not have started properly"
          }
        dest: C:\gto-service\install_service.ps1

    - name: Configure Windows Firewall
      win_firewall_rule:
        name: "GTO Service"
        localport: "{{ gto_service_port }}"
        action: allow
        direction: in
        protocol: tcp
        state: present

    - name: Run service installation script
      win_shell: PowerShell.exe -ExecutionPolicy Bypass -File C:\gto-service\install_service.ps1
      register: service_install_result

    - name: Display service installation output
      debug:
        var: service_install_result.stdout_lines

    - name: Wait for service to start
      pause:
        seconds: 10

    - name: Verify service is running
      win_service:
        name: GTOService
        state: started
      register: service_result

    - name: Test health endpoint
      win_uri:
        url: "http://localhost:{{ gto_service_port }}/health"
        method: GET
        timeout: 10
      register: health_check
      ignore_errors: yes

    - name: Display setup completion message
      debug:
        msg: |
          ========================================
          GTO+ Solver Setup Completed!
          ========================================

          Service Status: {{ service_result.state }}
          Access URL: http://{{ ansible_host }}:{{ gto_service_port }}
          Health Check: {{ health_check.status | default('Failed to connect') }}

          Available API Endpoints:
          - GET  /health                 - Service health check
          - GET  /gto/health             - GTO+ API health check  
          - GET  /gto/info               - GTO+ solver information
          - POST /gto/solve              - Forward solve requests to GTO+
          - POST /api/analyze            - Legacy mock analysis (for testing)

          Local Testing (on Windows VM):
          - python C:\gto-service\test_gto_api.py

          Remote Testing (from Mac/Linux):
          1. Update your .env file with:
             GTO_SOLVER_URL=http://{{ ansible_host }}:{{ gto_service_port }}

          2. Run remote test:
             python test-gto-service.py --host {{ ansible_host }} --port {{ gto_service_port }}

          3. Manual test from Mac:
             curl http://{{ ansible_host }}:{{ gto_service_port }}/health
             curl http://{{ ansible_host }}:{{ gto_service_port }}/gto/health

          4. Run GTO Assistant:
             make run

          Service Management:
          - View logs: Get-Content C:\gto-service\gto_service.log -Tail 20
          - Restart: Restart-Service GTOService
          - Status: Get-Service GTOService
          ========================================
