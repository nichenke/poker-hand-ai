---
- name: Configure SSH Server on Windows for VS Code Remote Development
  hosts: gto-solver
  gather_facts: yes
  vars:
    ssh_port: 22
    ssh_key_type: "ed25519"
    ssh_config_dir: "C:\\ProgramData\\ssh"

  tasks:
    - name: Get Windows version information
      win_shell: |
        $version = (Get-WmiObject -Class Win32_OperatingSystem).Version
        $build = (Get-WmiObject -Class Win32_OperatingSystem).BuildNumber
        Write-Output "Version: $version, Build: $build"
      register: windows_version

    - name: Display Windows version
      debug:
        msg: "Windows {{ windows_version.stdout | trim }}"

    - name: Check if OpenSSH Server is already installed
      win_service:
        name: sshd
      register: sshd_service
      ignore_errors: yes

    - name: Install OpenSSH Server via Windows Feature (Windows 10/Server 2019+)
      win_optional_feature:
        name: OpenSSH.Server~~~~0.0.1.0
        state: present
      register: openssh_install_feature
      ignore_errors: yes
      when: sshd_service is failed

    - name: Install OpenSSH Server via Chocolatey (fallback method)
      win_chocolatey:
        name: openssh
        state: present
      register: openssh_install_choco
      when: 
        - sshd_service is failed
        - openssh_install_feature is failed

    - name: Install OpenSSH Server via PowerShell (alternative method)
      win_shell: |
        # Try to install via Capabilities (newer Windows versions)
        try {
          Add-WindowsCapability -Online -Name OpenSSH.Server~~~~0.0.1.0
          Write-Output "Installed via Windows Capabilities"
        } catch {
          # Try to install via DISM (older Windows versions)
          try {
            Enable-WindowsOptionalFeature -Online -FeatureName "OpenSSH-Server" -All
            Write-Output "Installed via DISM"
          } catch {
            Write-Output "Failed to install via Windows features"
            throw $_
          }
        }
      register: openssh_install_ps
      when: 
        - sshd_service is failed
        - openssh_install_feature is failed
        - openssh_install_choco is failed

    - name: Install OpenSSH Client via Windows Feature
      win_optional_feature:
        name: OpenSSH.Client~~~~0.0.1.0
        state: present
      ignore_errors: yes

    - name: Install OpenSSH Client via Chocolatey (fallback)
      win_chocolatey:
        name: openssh
        state: present
      ignore_errors: yes
      when: openssh_install_feature is failed

    - name: Reboot if OpenSSH installation requires it
      win_reboot:
        reboot_timeout: 600
      when: 
        - openssh_install_feature is succeeded and openssh_install_feature.reboot_required
        - openssh_install_choco is succeeded

    - name: Wait for system to come back online after reboot
      wait_for_connection:
        timeout: 300
      when: 
        - openssh_install_feature is succeeded and openssh_install_feature.reboot_required
        - openssh_install_choco is succeeded

    - name: Verify SSH service is available
      win_service:
        name: sshd
      register: sshd_check
      ignore_errors: yes

    - name: Ensure SSH service is configured to start automatically
      win_service:
        name: sshd
        start_mode: auto
        state: started
      register: sshd_start
      ignore_errors: yes
      when: sshd_check is succeeded

    - name: Ensure SSH Agent service is configured
      win_service:
        name: ssh-agent
        start_mode: auto
        state: started
      ignore_errors: yes
      when: sshd_check is succeeded

    - name: Display SSH service status
      debug:
        msg: |
          SSH Service Status:
          - Service exists: {{ sshd_check is succeeded }}
          - Service started: {{ sshd_start is succeeded }}
          {% if sshd_check is failed %}
          - Error: SSH service not found. OpenSSH may not be properly installed.
          {% endif %}

    - name: Create SSH configuration directory
      win_file:
        path: "{{ ssh_config_dir }}"
        state: directory
      when: sshd_check is succeeded

    - name: Configure SSH server settings
      win_copy:
        dest: "{{ ssh_config_dir }}\\sshd_config"
        content: |
          # SSH Server Configuration for VS Code Remote Development
          Port {{ ssh_port }}
          Protocol 2
          
          # Authentication
          PubkeyAuthentication yes
          AuthorizedKeysFile .ssh/authorized_keys
          PasswordAuthentication yes
          PermitEmptyPasswords no
          
          # Security
          PermitRootLogin no
          MaxAuthTries 3
          ClientAliveInterval 300
          ClientAliveCountMax 2
          
          # Subsystems
          Subsystem sftp sftp-server.exe
          
          # Windows specific
          Match Group administrators
                 AuthorizedKeysFile __PROGRAMDATA__/ssh/administrators_authorized_keys
      notify: restart sshd
      when: sshd_check is succeeded

    - name: Create .ssh directory for user
      win_file:
        path: "C:\\Users\\{{ ansible_user }}\\.ssh"
        state: directory

    - name: Set proper permissions on .ssh directory
      win_acl:
        path: "C:\\Users\\{{ ansible_user }}\\.ssh"
        user: "{{ ansible_user }}"
        rights: FullControl
        type: allow
        state: present
        inheritance: ContainerInherit,ObjectInherit

    - name: Remove inherited permissions from .ssh directory
      win_acl:
        path: "C:\\Users\\{{ ansible_user }}\\.ssh"
        user: "Everyone"
        state: absent

    - name: Generate SSH host keys if they don't exist
      win_shell: |
        if (-not (Test-Path "{{ ssh_config_dir }}\\ssh_host_{{ ssh_key_type }}_key")) {
          ssh-keygen -t {{ ssh_key_type }} -f "{{ ssh_config_dir }}\\ssh_host_{{ ssh_key_type }}_key" -N '""'
        }
      register: host_key_generation

    - name: Configure Windows Firewall rule for SSH
      win_firewall_rule:
        name: "OpenSSH Server (sshd)"
        localport: "{{ ssh_port }}"
        action: allow
        direction: in
        protocol: tcp
        state: present

    - name: Get public key from local machine (if exists)
      local_action:
        module: stat
        path: "{{ lookup('env', 'HOME') }}/.ssh/id_ed25519.pub"
      register: local_public_key
      become: no

    - name: Read local public key content
      local_action:
        module: slurp
        src: "{{ lookup('env', 'HOME') }}/.ssh/id_ed25519.pub"
      register: public_key_content
      when: local_public_key.stat.exists
      become: no

    - name: Create authorized_keys file with local public key
      win_copy:
        dest: "C:\\Users\\{{ ansible_user }}\\.ssh\\authorized_keys"
        content: "{{ public_key_content.content | b64decode }}"
      when: local_public_key.stat.exists

    - name: Set proper permissions on authorized_keys
      win_acl:
        path: "C:\\Users\\{{ ansible_user }}\\.ssh\\authorized_keys"
        user: "{{ ansible_user }}"
        rights: FullControl
        type: allow
        state: present
        inheritance: None
      when: local_public_key.stat.exists

    - name: Remove other users' access to authorized_keys
      win_acl:
        path: "C:\\Users\\{{ ansible_user }}\\.ssh\\authorized_keys"
        user: "Everyone"
        state: absent
      when: local_public_key.stat.exists

    - name: Test SSH connection
      wait_for:
        host: "{{ ansible_host }}"
        port: "{{ ssh_port }}"
        timeout: 30
      delegate_to: localhost

    - name: Display SSH connection information
      debug:
        msg: |
          ========================================
          SSH Server Configuration Complete!
          ========================================

          SSH Connection Details:
          - Host: {{ ansible_host }}
          - Port: {{ ssh_port }}
          - User: {{ ansible_user }}

          VS Code Remote SSH Setup:
          1. Install extension: code --install-extension ms-vscode-remote.remote-ssh
          2. Add to ~/.ssh/config:
             
             Host gto-windows
                 HostName {{ ansible_host }}
                 User {{ ansible_user }}
                 Port {{ ssh_port }}
                 {% if local_public_key.stat.exists %}IdentityFile ~/.ssh/id_ed25519{% endif %}

          3. Connect via VS Code:
             - Press Ctrl+Shift+P (Cmd+Shift+P on Mac)
             - Type "Remote-SSH: Connect to Host"
             - Select "gto-windows"

          4. Alternative: Connect via command line
             ssh {{ ansible_user }}@{{ ansible_host }} -p {{ ssh_port }}

          Remote Development Paths:
          - GTO Service: C:\gto-service\gto_service.py
          - Logs: C:\gto-service\gto_service.log
          - Temp files: C:\temp\gto

          ========================================

  handlers:
    - name: restart sshd
      win_service:
        name: sshd
        state: restarted
